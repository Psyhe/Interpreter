-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParGramatyka
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsGramatyka
import LexGramatyka

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '%'        { PT _ (TS _ 3)  }
  '&&'       { PT _ (TS _ 4)  }
  '('        { PT _ (TS _ 5)  }
  ')'        { PT _ (TS _ 6)  }
  '*'        { PT _ (TS _ 7)  }
  '+'        { PT _ (TS _ 8)  }
  '++'       { PT _ (TS _ 9)  }
  ','        { PT _ (TS _ 10) }
  '-'        { PT _ (TS _ 11) }
  '--'       { PT _ (TS _ 12) }
  '->'       { PT _ (TS _ 13) }
  '/'        { PT _ (TS _ 14) }
  ';'        { PT _ (TS _ 15) }
  '<'        { PT _ (TS _ 16) }
  '<='       { PT _ (TS _ 17) }
  '='        { PT _ (TS _ 18) }
  '=='       { PT _ (TS _ 19) }
  '>'        { PT _ (TS _ 20) }
  '>='       { PT _ (TS _ 21) }
  'bool'     { PT _ (TS _ 22) }
  'break'    { PT _ (TS _ 23) }
  'continue' { PT _ (TS _ 24) }
  'def'      { PT _ (TS _ 25) }
  'else'     { PT _ (TS _ 26) }
  'false'    { PT _ (TS _ 27) }
  'if'       { PT _ (TS _ 28) }
  'int'      { PT _ (TS _ 29) }
  'lambda'   { PT _ (TS _ 30) }
  'return'   { PT _ (TS _ 31) }
  'string'   { PT _ (TS _ 32) }
  'true'     { PT _ (TS _ 33) }
  'var'      { PT _ (TS _ 34) }
  'void'     { PT _ (TS _ 35) }
  'while'    { PT _ (TS _ 36) }
  '{'        { PT _ (TS _ 37) }
  '||'       { PT _ (TS _ 38) }
  '}'        { PT _ (TS _ 39) }
  L_Ident    { PT _ (TV $$)   }
  L_integ    { PT _ (TI $$)   }
  L_quoted   { PT _ (TL $$)   }

%%

Ident :: { AbsGramatyka.Ident }
Ident  : L_Ident { AbsGramatyka.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsGramatyka.Program }
Program : ListAllDef { AbsGramatyka.ProgramName $1 }

ListAllDef :: { [AbsGramatyka.AllDef] }
ListAllDef : AllDef { (:[]) $1 } | AllDef ListAllDef { (:) $1 $2 }

Arg :: { AbsGramatyka.Arg }
Arg
  : Type Ident { AbsGramatyka.ValArg $1 $2 }
  | 'var' Type Ident { AbsGramatyka.VarArg $2 $3 }

ListArg :: { [AbsGramatyka.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

AllDef :: { AbsGramatyka.AllDef }
AllDef
  : 'def' Type Ident '(' ListArg ')' Block { AbsGramatyka.FunDef $2 $3 $5 $7 }
  | 'var' Type Ident '=' Expr ';' { AbsGramatyka.VarDef $2 $3 $5 }

Block :: { AbsGramatyka.Block }
Block : '{' ListStmt '}' { AbsGramatyka.BlockName $2 }

ListStmt :: { [AbsGramatyka.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { AbsGramatyka.Stmt }
Stmt
  : ';' { AbsGramatyka.Empty }
  | Block { AbsGramatyka.BStmt $1 }
  | AllDef { AbsGramatyka.DefStmt $1 }
  | Ident '=' Expr ';' { AbsGramatyka.Ass $1 $3 }
  | Ident '++' ';' { AbsGramatyka.Incr $1 }
  | Ident '--' ';' { AbsGramatyka.Decr $1 }
  | 'return' Expr ';' { AbsGramatyka.Ret $2 }
  | 'return' ';' { AbsGramatyka.VRet }
  | 'if' '(' Expr ')' Block { AbsGramatyka.Cond $3 $5 }
  | 'if' '(' Expr ')' Block 'else' Block { AbsGramatyka.CondElse $3 $5 $7 }
  | 'while' '(' Expr ')' Block { AbsGramatyka.While $3 $5 }
  | 'break' ';' { AbsGramatyka.Break }
  | 'continue' ';' { AbsGramatyka.Cont }
  | Expr ';' { AbsGramatyka.SExp $1 }

Type :: { AbsGramatyka.Type }
Type
  : 'int' { AbsGramatyka.Int }
  | 'string' { AbsGramatyka.Str }
  | 'bool' { AbsGramatyka.Bool }
  | 'void' { AbsGramatyka.Void }
  | '(' ListType ')' '->' Type { AbsGramatyka.Fun $2 $5 }

ListType :: { [AbsGramatyka.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }

Expr6 :: { AbsGramatyka.Expr }
Expr6
  : Ident { AbsGramatyka.EVar $1 }
  | Integer { AbsGramatyka.ELitInt $1 }
  | 'true' { AbsGramatyka.ELitTrue }
  | 'false' { AbsGramatyka.ELitFalse }
  | Ident '(' ListExpr ')' { AbsGramatyka.EApp $1 $3 }
  | String { AbsGramatyka.EString $1 }
  | '(' Expr ')' { $2 }

Expr5 :: { AbsGramatyka.Expr }
Expr5
  : '-' Expr6 { AbsGramatyka.Neg $2 }
  | '!' Expr6 { AbsGramatyka.Not $2 }
  | Expr6 { $1 }

Expr4 :: { AbsGramatyka.Expr }
Expr4
  : Expr4 MulOp Expr5 { AbsGramatyka.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsGramatyka.Expr }
Expr3
  : Expr3 AddOp Expr4 { AbsGramatyka.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsGramatyka.Expr }
Expr2
  : Expr2 RelOp Expr3 { AbsGramatyka.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsGramatyka.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsGramatyka.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsGramatyka.Expr }
Expr
  : Expr1 '||' Expr { AbsGramatyka.EOr $1 $3 }
  | 'lambda' '(' ListArg ')' '->' Type Block { AbsGramatyka.ELambda $3 $6 $7 }
  | Expr1 { $1 }

ListExpr :: { [AbsGramatyka.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsGramatyka.AddOp }
AddOp : '+' { AbsGramatyka.Plus } | '-' { AbsGramatyka.Minus }

MulOp :: { AbsGramatyka.MulOp }
MulOp
  : '*' { AbsGramatyka.Times }
  | '/' { AbsGramatyka.Div }
  | '%' { AbsGramatyka.Mod }

RelOp :: { AbsGramatyka.RelOp }
RelOp
  : '<' { AbsGramatyka.LTH }
  | '<=' { AbsGramatyka.LE }
  | '>' { AbsGramatyka.GTH }
  | '>=' { AbsGramatyka.GE }
  | '==' { AbsGramatyka.EQU }
  | '!=' { AbsGramatyka.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

