Mój język można określić jako Latte+-. 
Składnia języka podobna do C, z kilkoma zapożyczeniami składniowymi z innych popularnych języków.
Znajdują się w nim elementy takie jak w standardowym Latte z kilkoma zmianami:

Zmiany względem tabelki:
1. Kosmetyczna zmiana - w Latte są już typy boolean, string, int i void, nazwa typu "boolean" została zmieniona na "bool".
2. Arytmetyka pozostała niezmieniona.
3. Przypisanie wartości do zmiennej ma składnię var <typ> <nazwa> = <wartość>
4. Korzystamy z dostępnych już w Latte printów dla danych typów.
5. While, if i else jak w oryginalnym Latte, z tym że wszystkie bloki w otoczeniu muszą być w nawiasach klamrowych dla większej przejrzystości.
6. Standardowo w Latte występuje rekurencja, wobec tego w Latte+- też. Składnia to: def <typ> <nazwa> (<lista argumentów>){ <ciało funkcji> }
7. Przekazywanie argumentów przez zmienną (referencję) o składni: var <typ> <nazwa>, przez wartość o składni <typ> <nazwa>.
9. Defaultowo w Latte jest statyczne wiązanie i globalne zmienne.
10. Obsługa błędów będzie realizowana bezpośrednio przy implementacji z wykorzystaniem mechanizmów defaultowych w Latte.
Przewidywane błędy:
- obsługa dzielenia przez 0
- castowanie typów (nielegalne)
- złe przypisanie (np. zmienna zadeklarowana wcześniej jako int zostaje przypisana do zmiennej zadeklarowanej jako bool)
- błędy składniowe (np. var var)
- użycie zmiennej przed jej deklaracją
11. Przy definicji funkcji jest podawany jej typ, który definiuje typ wartości zwracanej.
12. Język będzie typowany statycznie - typy są deklarowane przy deklaracji zmiennej lub funkcji.
13. Będzie możliwość tworzenia zagnieżdżonych funkcji z typowaniem statycznym.
16. Można wyjść z pętli w sposób specjalny używając instrukcji break i continue, o znaczeniu jak w C++.
17. Funkcje jako parametry: składnia (<lista typów argumentów>) -> (<typ zwracany); możliwość zwracania funkcji, 
funkcje anonimowe - lambda, składnia: lambda (<lista argumentów) -> <typ zwracany> {<ciało funkcji>}
