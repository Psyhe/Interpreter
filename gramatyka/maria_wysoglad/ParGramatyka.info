-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ParGramatyka.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Program -> ListAllDef                              (4)
	ListAllDef -> AllDef                               (5)
	ListAllDef -> AllDef ListAllDef                    (6)
	Arg -> Type Ident                                  (7)
	Arg -> 'var' Type Ident                            (8)
	ListArg ->                                         (9)
	ListArg -> Arg                                     (10)
	ListArg -> Arg ',' ListArg                         (11)
	AllDef -> 'def' Type Ident '(' ListArg ')' Block   (12)
	AllDef -> 'var' Type Ident '=' Expr ';'            (13)
	Block -> '{' ListStmt '}'                          (14)
	ListStmt ->                                        (15)
	ListStmt -> Stmt ListStmt                          (16)
	Stmt -> ';'                                        (17)
	Stmt -> Block                                      (18)
	Stmt -> AllDef                                     (19)
	Stmt -> Ident '=' Expr ';'                         (20)
	Stmt -> Ident '++' ';'                             (21)
	Stmt -> Ident '--' ';'                             (22)
	Stmt -> 'return' Expr ';'                          (23)
	Stmt -> 'return' ';'                               (24)
	Stmt -> 'if' '(' Expr ')' Block                    (25)
	Stmt -> 'if' '(' Expr ')' Block 'else' Block       (26)
	Stmt -> 'while' '(' Expr ')' Block                 (27)
	Stmt -> 'break' ';'                                (28)
	Stmt -> 'continue' ';'                             (29)
	Stmt -> Expr ';'                                   (30)
	Type -> 'int'                                      (31)
	Type -> 'string'                                   (32)
	Type -> 'bool'                                     (33)
	Type -> 'void'                                     (34)
	Type -> '(' ListType ')' '->' Type                 (35)
	ListType ->                                        (36)
	ListType -> Type                                   (37)
	ListType -> Type ',' ListType                      (38)
	Expr6 -> Ident                                     (39)
	Expr6 -> Integer                                   (40)
	Expr6 -> 'true'                                    (41)
	Expr6 -> 'false'                                   (42)
	Expr6 -> Ident '(' ListExpr ')'                    (43)
	Expr6 -> String                                    (44)
	Expr6 -> '(' Expr ')'                              (45)
	Expr5 -> '-' Expr6                                 (46)
	Expr5 -> '!' Expr6                                 (47)
	Expr5 -> Expr6                                     (48)
	Expr4 -> Expr4 MulOp Expr5                         (49)
	Expr4 -> Expr5                                     (50)
	Expr3 -> Expr3 AddOp Expr4                         (51)
	Expr3 -> Expr4                                     (52)
	Expr2 -> Expr2 RelOp Expr3                         (53)
	Expr2 -> Expr3                                     (54)
	Expr1 -> Expr2 '&&' Expr1                          (55)
	Expr1 -> Expr2                                     (56)
	Expr -> Expr1 '||' Expr                            (57)
	Expr -> 'lambda' '(' ListArg ')' '->' Type Block   (58)
	Expr -> Expr1                                      (59)
	ListExpr ->                                        (60)
	ListExpr -> Expr                                   (61)
	ListExpr -> Expr ',' ListExpr                      (62)
	AddOp -> '+'                                       (63)
	AddOp -> '-'                                       (64)
	MulOp -> '*'                                       (65)
	MulOp -> '/'                                       (66)
	MulOp -> '%'                                       (67)
	RelOp -> '<'                                       (68)
	RelOp -> '<='                                      (69)
	RelOp -> '>'                                       (70)
	RelOp -> '>='                                      (71)
	RelOp -> '=='                                      (72)
	RelOp -> '!='                                      (73)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&&'           { PT _ (TS _ 4) }
	'('            { PT _ (TS _ 5) }
	')'            { PT _ (TS _ 6) }
	'*'            { PT _ (TS _ 7) }
	'+'            { PT _ (TS _ 8) }
	'++'           { PT _ (TS _ 9) }
	','            { PT _ (TS _ 10) }
	'-'            { PT _ (TS _ 11) }
	'--'           { PT _ (TS _ 12) }
	'->'           { PT _ (TS _ 13) }
	'/'            { PT _ (TS _ 14) }
	';'            { PT _ (TS _ 15) }
	'<'            { PT _ (TS _ 16) }
	'<='           { PT _ (TS _ 17) }
	'='            { PT _ (TS _ 18) }
	'=='           { PT _ (TS _ 19) }
	'>'            { PT _ (TS _ 20) }
	'>='           { PT _ (TS _ 21) }
	'bool'         { PT _ (TS _ 22) }
	'break'        { PT _ (TS _ 23) }
	'continue'     { PT _ (TS _ 24) }
	'def'          { PT _ (TS _ 25) }
	'else'         { PT _ (TS _ 26) }
	'false'        { PT _ (TS _ 27) }
	'if'           { PT _ (TS _ 28) }
	'int'          { PT _ (TS _ 29) }
	'lambda'       { PT _ (TS _ 30) }
	'return'       { PT _ (TS _ 31) }
	'string'       { PT _ (TS _ 32) }
	'true'         { PT _ (TS _ 33) }
	'var'          { PT _ (TS _ 34) }
	'void'         { PT _ (TS _ 35) }
	'while'        { PT _ (TS _ 36) }
	'{'            { PT _ (TS _ 37) }
	'||'           { PT _ (TS _ 38) }
	'}'            { PT _ (TS _ 39) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Program         rule  4
	ListAllDef      rules 5, 6
	Arg             rules 7, 8
	ListArg         rules 9, 10, 11
	AllDef          rules 12, 13
	Block           rule  14
	ListStmt        rules 15, 16
	Stmt            rules 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30
	Type            rules 31, 32, 33, 34, 35
	ListType        rules 36, 37, 38
	Expr6           rules 39, 40, 41, 42, 43, 44, 45
	Expr5           rules 46, 47, 48
	Expr4           rules 49, 50
	Expr3           rules 51, 52
	Expr2           rules 53, 54
	Expr1           rules 55, 56
	Expr            rules 57, 58, 59
	ListExpr        rules 60, 61, 62
	AddOp           rules 63, 64
	MulOp           rules 65, 66, 67
	RelOp           rules 68, 69, 70, 71, 72, 73

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'def'          shift, and enter state 6
	'var'          shift, and enter state 7

	Program        goto state 3
	ListAllDef     goto state 4
	AllDef         goto state 5

State 1

	Ident -> . L_Ident                                  (rule 1)

	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	'%'            reduce using rule 1
	'&&'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	'*'            reduce using rule 1
	'+'            reduce using rule 1
	'++'           reduce using rule 1
	','            reduce using rule 1
	'-'            reduce using rule 1
	'--'           reduce using rule 1
	'/'            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'||'           reduce using rule 1


State 3

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 4

	Program -> ListAllDef .                             (rule 4)

	%eof           reduce using rule 4


State 5

	ListAllDef -> AllDef .                              (rule 5)
	ListAllDef -> AllDef . ListAllDef                   (rule 6)

	'def'          shift, and enter state 6
	'var'          shift, and enter state 7
	%eof           reduce using rule 5

	ListAllDef     goto state 15
	AllDef         goto state 5

State 6

	AllDef -> 'def' . Type Ident '(' ListArg ')' Block    (rule 12)

	'('            shift, and enter state 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'void'         shift, and enter state 13

	Type           goto state 14

State 7

	AllDef -> 'var' . Type Ident '=' Expr ';'           (rule 13)

	'('            shift, and enter state 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'void'         shift, and enter state 13

	Type           goto state 8

State 8

	AllDef -> 'var' Type . Ident '=' Expr ';'           (rule 13)

	L_Ident        shift, and enter state 2

	Ident          goto state 19

State 9

	Type -> '(' . ListType ')' '->' Type                (rule 35)

	'('            shift, and enter state 9
	')'            reduce using rule 36
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'void'         shift, and enter state 13

	Type           goto state 17
	ListType       goto state 18

State 10

	Type -> 'bool' .                                    (rule 33)

	')'            reduce using rule 33
	','            reduce using rule 33
	'{'            reduce using rule 33
	L_Ident        reduce using rule 33


State 11

	Type -> 'int' .                                     (rule 31)

	')'            reduce using rule 31
	','            reduce using rule 31
	'{'            reduce using rule 31
	L_Ident        reduce using rule 31


State 12

	Type -> 'string' .                                  (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	'{'            reduce using rule 32
	L_Ident        reduce using rule 32


State 13

	Type -> 'void' .                                    (rule 34)

	')'            reduce using rule 34
	','            reduce using rule 34
	'{'            reduce using rule 34
	L_Ident        reduce using rule 34


State 14

	AllDef -> 'def' Type . Ident '(' ListArg ')' Block    (rule 12)

	L_Ident        shift, and enter state 2

	Ident          goto state 16

State 15

	ListAllDef -> AllDef ListAllDef .                   (rule 6)

	%eof           reduce using rule 6


State 16

	AllDef -> 'def' Type Ident . '(' ListArg ')' Block    (rule 12)

	'('            shift, and enter state 23


State 17

	ListType -> Type .                                  (rule 37)
	ListType -> Type . ',' ListType                     (rule 38)

	')'            reduce using rule 37
	','            shift, and enter state 22


State 18

	Type -> '(' ListType . ')' '->' Type                (rule 35)

	')'            shift, and enter state 21


State 19

	AllDef -> 'var' Type Ident . '=' Expr ';'           (rule 13)

	'='            shift, and enter state 20


State 20

	AllDef -> 'var' Type Ident '=' . Expr ';'           (rule 13)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 39

State 21

	Type -> '(' ListType ')' . '->' Type                (rule 35)

	'->'           shift, and enter state 29


State 22

	ListType -> Type ',' . ListType                     (rule 38)

	'('            shift, and enter state 9
	')'            reduce using rule 36
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'void'         shift, and enter state 13

	Type           goto state 17
	ListType       goto state 28

State 23

	AllDef -> 'def' Type Ident '(' . ListArg ')' Block    (rule 12)

	'('            shift, and enter state 9
	')'            reduce using rule 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'var'          shift, and enter state 27
	'void'         shift, and enter state 13

	Arg            goto state 24
	ListArg        goto state 25
	Type           goto state 26

State 24

	ListArg -> Arg .                                    (rule 10)
	ListArg -> Arg . ',' ListArg                        (rule 11)

	')'            reduce using rule 10
	','            shift, and enter state 74


State 25

	AllDef -> 'def' Type Ident '(' ListArg . ')' Block    (rule 12)

	')'            shift, and enter state 73


State 26

	Arg -> Type . Ident                                 (rule 7)

	L_Ident        shift, and enter state 2

	Ident          goto state 72

State 27

	Arg -> 'var' . Type Ident                           (rule 8)

	'('            shift, and enter state 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'void'         shift, and enter state 13

	Type           goto state 71

State 28

	ListType -> Type ',' ListType .                     (rule 38)

	')'            reduce using rule 38


State 29

	Type -> '(' ListType ')' '->' . Type                (rule 35)

	'('            shift, and enter state 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'void'         shift, and enter state 13

	Type           goto state 70

State 30

	Expr6 -> Ident .                                    (rule 39)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 43)

	'!='           reduce using rule 39
	'%'            reduce using rule 39
	'&&'           reduce using rule 39
	'('            shift, and enter state 69
	')'            reduce using rule 39
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	'-'            reduce using rule 39
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'||'           reduce using rule 39


State 31

	Expr6 -> Integer .                                  (rule 40)

	'!='           reduce using rule 40
	'%'            reduce using rule 40
	'&&'           reduce using rule 40
	')'            reduce using rule 40
	'*'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	'-'            reduce using rule 40
	'/'            reduce using rule 40
	';'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'||'           reduce using rule 40


State 32

	Expr6 -> String .                                   (rule 44)

	'!='           reduce using rule 44
	'%'            reduce using rule 44
	'&&'           reduce using rule 44
	')'            reduce using rule 44
	'*'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	'-'            reduce using rule 44
	'/'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'||'           reduce using rule 44


State 33

	Expr5 -> Expr6 .                                    (rule 48)

	'!='           reduce using rule 48
	'%'            reduce using rule 48
	'&&'           reduce using rule 48
	')'            reduce using rule 48
	'*'            reduce using rule 48
	'+'            reduce using rule 48
	','            reduce using rule 48
	'-'            reduce using rule 48
	'/'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'||'           reduce using rule 48


State 34

	Expr4 -> Expr5 .                                    (rule 50)

	'!='           reduce using rule 50
	'%'            reduce using rule 50
	'&&'           reduce using rule 50
	')'            reduce using rule 50
	'*'            reduce using rule 50
	'+'            reduce using rule 50
	','            reduce using rule 50
	'-'            reduce using rule 50
	'/'            reduce using rule 50
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'=='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'||'           reduce using rule 50


State 35

	Expr4 -> Expr4 . MulOp Expr5                        (rule 49)
	Expr3 -> Expr4 .                                    (rule 52)

	'!='           reduce using rule 52
	'%'            shift, and enter state 66
	'&&'           reduce using rule 52
	')'            reduce using rule 52
	'*'            shift, and enter state 67
	'+'            reduce using rule 52
	','            reduce using rule 52
	'-'            reduce using rule 52
	'/'            shift, and enter state 68
	';'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'||'           reduce using rule 52

	MulOp          goto state 65

State 36

	Expr3 -> Expr3 . AddOp Expr4                        (rule 51)
	Expr2 -> Expr3 .                                    (rule 54)

	'!='           reduce using rule 54
	'&&'           reduce using rule 54
	')'            reduce using rule 54
	'+'            shift, and enter state 63
	','            reduce using rule 54
	'-'            shift, and enter state 64
	';'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'=='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'||'           reduce using rule 54

	AddOp          goto state 62

State 37

	Expr2 -> Expr2 . RelOp Expr3                        (rule 53)
	Expr1 -> Expr2 . '&&' Expr1                         (rule 55)
	Expr1 -> Expr2 .                                    (rule 56)

	'!='           shift, and enter state 55
	'&&'           shift, and enter state 56
	')'            reduce using rule 56
	','            reduce using rule 56
	';'            reduce using rule 56
	'<'            shift, and enter state 57
	'<='           shift, and enter state 58
	'=='           shift, and enter state 59
	'>'            shift, and enter state 60
	'>='           shift, and enter state 61
	'||'           reduce using rule 56

	RelOp          goto state 54

State 38

	Expr -> Expr1 . '||' Expr                           (rule 57)
	Expr -> Expr1 .                                     (rule 59)

	')'            reduce using rule 59
	','            reduce using rule 59
	';'            reduce using rule 59
	'||'           shift, and enter state 53


State 39

	AllDef -> 'var' Type Ident '=' Expr . ';'           (rule 13)

	';'            shift, and enter state 52


State 40

	Expr5 -> '!' . Expr6                                (rule 47)

	'('            shift, and enter state 41
	'false'        shift, and enter state 43
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 51

State 41

	Expr6 -> '(' . Expr ')'                             (rule 45)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 50

State 42

	Expr5 -> '-' . Expr6                                (rule 46)

	'('            shift, and enter state 41
	'false'        shift, and enter state 43
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 49

State 43

	Expr6 -> 'false' .                                  (rule 42)

	'!='           reduce using rule 42
	'%'            reduce using rule 42
	'&&'           reduce using rule 42
	')'            reduce using rule 42
	'*'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 42
	'-'            reduce using rule 42
	'/'            reduce using rule 42
	';'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'||'           reduce using rule 42


State 44

	Expr -> 'lambda' . '(' ListArg ')' '->' Type Block    (rule 58)

	'('            shift, and enter state 48


State 45

	Expr6 -> 'true' .                                   (rule 41)

	'!='           reduce using rule 41
	'%'            reduce using rule 41
	'&&'           reduce using rule 41
	')'            reduce using rule 41
	'*'            reduce using rule 41
	'+'            reduce using rule 41
	','            reduce using rule 41
	'-'            reduce using rule 41
	'/'            reduce using rule 41
	';'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'||'           reduce using rule 41


State 46

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	'%'            reduce using rule 2
	'&&'           reduce using rule 2
	')'            reduce using rule 2
	'*'            reduce using rule 2
	'+'            reduce using rule 2
	','            reduce using rule 2
	'-'            reduce using rule 2
	'/'            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'||'           reduce using rule 2


State 47

	String -> L_quoted .                                (rule 3)

	'!='           reduce using rule 3
	'%'            reduce using rule 3
	'&&'           reduce using rule 3
	')'            reduce using rule 3
	'*'            reduce using rule 3
	'+'            reduce using rule 3
	','            reduce using rule 3
	'-'            reduce using rule 3
	'/'            reduce using rule 3
	';'            reduce using rule 3
	'<'            reduce using rule 3
	'<='           reduce using rule 3
	'=='           reduce using rule 3
	'>'            reduce using rule 3
	'>='           reduce using rule 3
	'||'           reduce using rule 3


State 48

	Expr -> 'lambda' '(' . ListArg ')' '->' Type Block    (rule 58)

	'('            shift, and enter state 9
	')'            reduce using rule 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'var'          shift, and enter state 27
	'void'         shift, and enter state 13

	Arg            goto state 24
	ListArg        goto state 87
	Type           goto state 26

State 49

	Expr5 -> '-' Expr6 .                                (rule 46)

	'!='           reduce using rule 46
	'%'            reduce using rule 46
	'&&'           reduce using rule 46
	')'            reduce using rule 46
	'*'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	'-'            reduce using rule 46
	'/'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'||'           reduce using rule 46


State 50

	Expr6 -> '(' Expr . ')'                             (rule 45)

	')'            shift, and enter state 86


State 51

	Expr5 -> '!' Expr6 .                                (rule 47)

	'!='           reduce using rule 47
	'%'            reduce using rule 47
	'&&'           reduce using rule 47
	')'            reduce using rule 47
	'*'            reduce using rule 47
	'+'            reduce using rule 47
	','            reduce using rule 47
	'-'            reduce using rule 47
	'/'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'||'           reduce using rule 47


State 52

	AllDef -> 'var' Type Ident '=' Expr ';' .           (rule 13)

	'!'            reduce using rule 13
	'('            reduce using rule 13
	'-'            reduce using rule 13
	';'            reduce using rule 13
	'break'        reduce using rule 13
	'continue'     reduce using rule 13
	'def'          reduce using rule 13
	'false'        reduce using rule 13
	'if'           reduce using rule 13
	'lambda'       reduce using rule 13
	'return'       reduce using rule 13
	'true'         reduce using rule 13
	'var'          reduce using rule 13
	'while'        reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	L_Ident        reduce using rule 13
	L_integ        reduce using rule 13
	L_quoted       reduce using rule 13
	%eof           reduce using rule 13


State 53

	Expr -> Expr1 '||' . Expr                           (rule 57)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 85

State 54

	Expr2 -> Expr2 RelOp . Expr3                        (rule 53)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 84

State 55

	RelOp -> '!=' .                                     (rule 73)

	'!'            reduce using rule 73
	'('            reduce using rule 73
	'-'            reduce using rule 73
	'false'        reduce using rule 73
	'true'         reduce using rule 73
	L_Ident        reduce using rule 73
	L_integ        reduce using rule 73
	L_quoted       reduce using rule 73


State 56

	Expr1 -> Expr2 '&&' . Expr1                         (rule 55)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 83

State 57

	RelOp -> '<' .                                      (rule 68)

	'!'            reduce using rule 68
	'('            reduce using rule 68
	'-'            reduce using rule 68
	'false'        reduce using rule 68
	'true'         reduce using rule 68
	L_Ident        reduce using rule 68
	L_integ        reduce using rule 68
	L_quoted       reduce using rule 68


State 58

	RelOp -> '<=' .                                     (rule 69)

	'!'            reduce using rule 69
	'('            reduce using rule 69
	'-'            reduce using rule 69
	'false'        reduce using rule 69
	'true'         reduce using rule 69
	L_Ident        reduce using rule 69
	L_integ        reduce using rule 69
	L_quoted       reduce using rule 69


State 59

	RelOp -> '==' .                                     (rule 72)

	'!'            reduce using rule 72
	'('            reduce using rule 72
	'-'            reduce using rule 72
	'false'        reduce using rule 72
	'true'         reduce using rule 72
	L_Ident        reduce using rule 72
	L_integ        reduce using rule 72
	L_quoted       reduce using rule 72


State 60

	RelOp -> '>' .                                      (rule 70)

	'!'            reduce using rule 70
	'('            reduce using rule 70
	'-'            reduce using rule 70
	'false'        reduce using rule 70
	'true'         reduce using rule 70
	L_Ident        reduce using rule 70
	L_integ        reduce using rule 70
	L_quoted       reduce using rule 70


State 61

	RelOp -> '>=' .                                     (rule 71)

	'!'            reduce using rule 71
	'('            reduce using rule 71
	'-'            reduce using rule 71
	'false'        reduce using rule 71
	'true'         reduce using rule 71
	L_Ident        reduce using rule 71
	L_integ        reduce using rule 71
	L_quoted       reduce using rule 71


State 62

	Expr3 -> Expr3 AddOp . Expr4                        (rule 51)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 82

State 63

	AddOp -> '+' .                                      (rule 63)

	'!'            reduce using rule 63
	'('            reduce using rule 63
	'-'            reduce using rule 63
	'false'        reduce using rule 63
	'true'         reduce using rule 63
	L_Ident        reduce using rule 63
	L_integ        reduce using rule 63
	L_quoted       reduce using rule 63


State 64

	AddOp -> '-' .                                      (rule 64)

	'!'            reduce using rule 64
	'('            reduce using rule 64
	'-'            reduce using rule 64
	'false'        reduce using rule 64
	'true'         reduce using rule 64
	L_Ident        reduce using rule 64
	L_integ        reduce using rule 64
	L_quoted       reduce using rule 64


State 65

	Expr4 -> Expr4 MulOp . Expr5                        (rule 49)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 81

State 66

	MulOp -> '%' .                                      (rule 67)

	'!'            reduce using rule 67
	'('            reduce using rule 67
	'-'            reduce using rule 67
	'false'        reduce using rule 67
	'true'         reduce using rule 67
	L_Ident        reduce using rule 67
	L_integ        reduce using rule 67
	L_quoted       reduce using rule 67


State 67

	MulOp -> '*' .                                      (rule 65)

	'!'            reduce using rule 65
	'('            reduce using rule 65
	'-'            reduce using rule 65
	'false'        reduce using rule 65
	'true'         reduce using rule 65
	L_Ident        reduce using rule 65
	L_integ        reduce using rule 65
	L_quoted       reduce using rule 65


State 68

	MulOp -> '/' .                                      (rule 66)

	'!'            reduce using rule 66
	'('            reduce using rule 66
	'-'            reduce using rule 66
	'false'        reduce using rule 66
	'true'         reduce using rule 66
	L_Ident        reduce using rule 66
	L_integ        reduce using rule 66
	L_quoted       reduce using rule 66


State 69

	Expr6 -> Ident '(' . ListExpr ')'                   (rule 43)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	')'            reduce using rule 60
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 79
	ListExpr       goto state 80

State 70

	Type -> '(' ListType ')' '->' Type .                (rule 35)

	')'            reduce using rule 35
	','            reduce using rule 35
	'{'            reduce using rule 35
	L_Ident        reduce using rule 35


State 71

	Arg -> 'var' Type . Ident                           (rule 8)

	L_Ident        shift, and enter state 2

	Ident          goto state 78

State 72

	Arg -> Type Ident .                                 (rule 7)

	')'            reduce using rule 7
	','            reduce using rule 7


State 73

	AllDef -> 'def' Type Ident '(' ListArg ')' . Block    (rule 12)

	'{'            shift, and enter state 77

	Block          goto state 76

State 74

	ListArg -> Arg ',' . ListArg                        (rule 11)

	'('            shift, and enter state 9
	')'            reduce using rule 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'var'          shift, and enter state 27
	'void'         shift, and enter state 13

	Arg            goto state 24
	ListArg        goto state 75
	Type           goto state 26

State 75

	ListArg -> Arg ',' ListArg .                        (rule 11)

	')'            reduce using rule 11


State 76

	AllDef -> 'def' Type Ident '(' ListArg ')' Block .    (rule 12)

	'!'            reduce using rule 12
	'('            reduce using rule 12
	'-'            reduce using rule 12
	';'            reduce using rule 12
	'break'        reduce using rule 12
	'continue'     reduce using rule 12
	'def'          reduce using rule 12
	'false'        reduce using rule 12
	'if'           reduce using rule 12
	'lambda'       reduce using rule 12
	'return'       reduce using rule 12
	'true'         reduce using rule 12
	'var'          reduce using rule 12
	'while'        reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	L_Ident        reduce using rule 12
	L_integ        reduce using rule 12
	L_quoted       reduce using rule 12
	%eof           reduce using rule 12


State 77

	Block -> '{' . ListStmt '}'                         (rule 14)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'def'          shift, and enter state 6
	'false'        shift, and enter state 43
	'if'           shift, and enter state 100
	'lambda'       shift, and enter state 44
	'return'       shift, and enter state 101
	'true'         shift, and enter state 45
	'var'          shift, and enter state 7
	'while'        shift, and enter state 102
	'{'            shift, and enter state 77
	'}'            reduce using rule 15
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	AllDef         goto state 92
	Block          goto state 93
	ListStmt       goto state 94
	Stmt           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 78

	Arg -> 'var' Type Ident .                           (rule 8)

	')'            reduce using rule 8
	','            reduce using rule 8


State 79

	ListExpr -> Expr .                                  (rule 61)
	ListExpr -> Expr . ',' ListExpr                     (rule 62)

	')'            reduce using rule 61
	','            shift, and enter state 90


State 80

	Expr6 -> Ident '(' ListExpr . ')'                   (rule 43)

	')'            shift, and enter state 89


State 81

	Expr4 -> Expr4 MulOp Expr5 .                        (rule 49)

	'!='           reduce using rule 49
	'%'            reduce using rule 49
	'&&'           reduce using rule 49
	')'            reduce using rule 49
	'*'            reduce using rule 49
	'+'            reduce using rule 49
	','            reduce using rule 49
	'-'            reduce using rule 49
	'/'            reduce using rule 49
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'||'           reduce using rule 49


State 82

	Expr4 -> Expr4 . MulOp Expr5                        (rule 49)
	Expr3 -> Expr3 AddOp Expr4 .                        (rule 51)

	'!='           reduce using rule 51
	'%'            shift, and enter state 66
	'&&'           reduce using rule 51
	')'            reduce using rule 51
	'*'            shift, and enter state 67
	'+'            reduce using rule 51
	','            reduce using rule 51
	'-'            reduce using rule 51
	'/'            shift, and enter state 68
	';'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'||'           reduce using rule 51

	MulOp          goto state 65

State 83

	Expr1 -> Expr2 '&&' Expr1 .                         (rule 55)

	')'            reduce using rule 55
	','            reduce using rule 55
	';'            reduce using rule 55
	'||'           reduce using rule 55


State 84

	Expr3 -> Expr3 . AddOp Expr4                        (rule 51)
	Expr2 -> Expr2 RelOp Expr3 .                        (rule 53)

	'!='           reduce using rule 53
	'&&'           reduce using rule 53
	')'            reduce using rule 53
	'+'            shift, and enter state 63
	','            reduce using rule 53
	'-'            shift, and enter state 64
	';'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'||'           reduce using rule 53

	AddOp          goto state 62

State 85

	Expr -> Expr1 '||' Expr .                           (rule 57)

	')'            reduce using rule 57
	','            reduce using rule 57
	';'            reduce using rule 57


State 86

	Expr6 -> '(' Expr ')' .                             (rule 45)

	'!='           reduce using rule 45
	'%'            reduce using rule 45
	'&&'           reduce using rule 45
	')'            reduce using rule 45
	'*'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	'-'            reduce using rule 45
	'/'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'||'           reduce using rule 45


State 87

	Expr -> 'lambda' '(' ListArg . ')' '->' Type Block    (rule 58)

	')'            shift, and enter state 88


State 88

	Expr -> 'lambda' '(' ListArg ')' . '->' Type Block    (rule 58)

	'->'           shift, and enter state 116


State 89

	Expr6 -> Ident '(' ListExpr ')' .                   (rule 43)

	'!='           reduce using rule 43
	'%'            reduce using rule 43
	'&&'           reduce using rule 43
	')'            reduce using rule 43
	'*'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	'-'            reduce using rule 43
	'/'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'||'           reduce using rule 43


State 90

	ListExpr -> Expr ',' . ListExpr                     (rule 62)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	')'            reduce using rule 60
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 79
	ListExpr       goto state 115

State 91

	Stmt -> Ident . '=' Expr ';'                        (rule 20)
	Stmt -> Ident . '++' ';'                            (rule 21)
	Stmt -> Ident . '--' ';'                            (rule 22)
	Expr6 -> Ident .                                    (rule 39)
	Expr6 -> Ident . '(' ListExpr ')'                   (rule 43)

	'!='           reduce using rule 39
	'%'            reduce using rule 39
	'&&'           reduce using rule 39
	'('            shift, and enter state 69
	'*'            reduce using rule 39
	'+'            reduce using rule 39
	'++'           shift, and enter state 112
	'-'            reduce using rule 39
	'--'           shift, and enter state 113
	'/'            reduce using rule 39
	';'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'='            shift, and enter state 114
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'||'           reduce using rule 39


State 92

	Stmt -> AllDef .                                    (rule 19)

	'!'            reduce using rule 19
	'('            reduce using rule 19
	'-'            reduce using rule 19
	';'            reduce using rule 19
	'break'        reduce using rule 19
	'continue'     reduce using rule 19
	'def'          reduce using rule 19
	'false'        reduce using rule 19
	'if'           reduce using rule 19
	'lambda'       reduce using rule 19
	'return'       reduce using rule 19
	'true'         reduce using rule 19
	'var'          reduce using rule 19
	'while'        reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	L_Ident        reduce using rule 19
	L_integ        reduce using rule 19
	L_quoted       reduce using rule 19


State 93

	Stmt -> Block .                                     (rule 18)

	'!'            reduce using rule 18
	'('            reduce using rule 18
	'-'            reduce using rule 18
	';'            reduce using rule 18
	'break'        reduce using rule 18
	'continue'     reduce using rule 18
	'def'          reduce using rule 18
	'false'        reduce using rule 18
	'if'           reduce using rule 18
	'lambda'       reduce using rule 18
	'return'       reduce using rule 18
	'true'         reduce using rule 18
	'var'          reduce using rule 18
	'while'        reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	L_Ident        reduce using rule 18
	L_integ        reduce using rule 18
	L_quoted       reduce using rule 18


State 94

	Block -> '{' ListStmt . '}'                         (rule 14)

	'}'            shift, and enter state 111


State 95

	ListStmt -> Stmt . ListStmt                         (rule 16)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 97
	'break'        shift, and enter state 98
	'continue'     shift, and enter state 99
	'def'          shift, and enter state 6
	'false'        shift, and enter state 43
	'if'           shift, and enter state 100
	'lambda'       shift, and enter state 44
	'return'       shift, and enter state 101
	'true'         shift, and enter state 45
	'var'          shift, and enter state 7
	'while'        shift, and enter state 102
	'{'            shift, and enter state 77
	'}'            reduce using rule 15
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 91
	Integer        goto state 31
	String         goto state 32
	AllDef         goto state 92
	Block          goto state 93
	ListStmt       goto state 110
	Stmt           goto state 95
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 96

State 96

	Stmt -> Expr . ';'                                  (rule 30)

	';'            shift, and enter state 109


State 97

	Stmt -> ';' .                                       (rule 17)

	'!'            reduce using rule 17
	'('            reduce using rule 17
	'-'            reduce using rule 17
	';'            reduce using rule 17
	'break'        reduce using rule 17
	'continue'     reduce using rule 17
	'def'          reduce using rule 17
	'false'        reduce using rule 17
	'if'           reduce using rule 17
	'lambda'       reduce using rule 17
	'return'       reduce using rule 17
	'true'         reduce using rule 17
	'var'          reduce using rule 17
	'while'        reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	L_Ident        reduce using rule 17
	L_integ        reduce using rule 17
	L_quoted       reduce using rule 17


State 98

	Stmt -> 'break' . ';'                               (rule 28)

	';'            shift, and enter state 108


State 99

	Stmt -> 'continue' . ';'                            (rule 29)

	';'            shift, and enter state 107


State 100

	Stmt -> 'if' . '(' Expr ')' Block                   (rule 25)
	Stmt -> 'if' . '(' Expr ')' Block 'else' Block      (rule 26)

	'('            shift, and enter state 106


State 101

	Stmt -> 'return' . Expr ';'                         (rule 23)
	Stmt -> 'return' . ';'                              (rule 24)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	';'            shift, and enter state 105
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 104

State 102

	Stmt -> 'while' . '(' Expr ')' Block                (rule 27)

	'('            shift, and enter state 103


State 103

	Stmt -> 'while' '(' . Expr ')' Block                (rule 27)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 123

State 104

	Stmt -> 'return' Expr . ';'                         (rule 23)

	';'            shift, and enter state 122


State 105

	Stmt -> 'return' ';' .                              (rule 24)

	'!'            reduce using rule 24
	'('            reduce using rule 24
	'-'            reduce using rule 24
	';'            reduce using rule 24
	'break'        reduce using rule 24
	'continue'     reduce using rule 24
	'def'          reduce using rule 24
	'false'        reduce using rule 24
	'if'           reduce using rule 24
	'lambda'       reduce using rule 24
	'return'       reduce using rule 24
	'true'         reduce using rule 24
	'var'          reduce using rule 24
	'while'        reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	L_Ident        reduce using rule 24
	L_integ        reduce using rule 24
	L_quoted       reduce using rule 24


State 106

	Stmt -> 'if' '(' . Expr ')' Block                   (rule 25)
	Stmt -> 'if' '(' . Expr ')' Block 'else' Block      (rule 26)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 121

State 107

	Stmt -> 'continue' ';' .                            (rule 29)

	'!'            reduce using rule 29
	'('            reduce using rule 29
	'-'            reduce using rule 29
	';'            reduce using rule 29
	'break'        reduce using rule 29
	'continue'     reduce using rule 29
	'def'          reduce using rule 29
	'false'        reduce using rule 29
	'if'           reduce using rule 29
	'lambda'       reduce using rule 29
	'return'       reduce using rule 29
	'true'         reduce using rule 29
	'var'          reduce using rule 29
	'while'        reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	L_Ident        reduce using rule 29
	L_integ        reduce using rule 29
	L_quoted       reduce using rule 29


State 108

	Stmt -> 'break' ';' .                               (rule 28)

	'!'            reduce using rule 28
	'('            reduce using rule 28
	'-'            reduce using rule 28
	';'            reduce using rule 28
	'break'        reduce using rule 28
	'continue'     reduce using rule 28
	'def'          reduce using rule 28
	'false'        reduce using rule 28
	'if'           reduce using rule 28
	'lambda'       reduce using rule 28
	'return'       reduce using rule 28
	'true'         reduce using rule 28
	'var'          reduce using rule 28
	'while'        reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	L_Ident        reduce using rule 28
	L_integ        reduce using rule 28
	L_quoted       reduce using rule 28


State 109

	Stmt -> Expr ';' .                                  (rule 30)

	'!'            reduce using rule 30
	'('            reduce using rule 30
	'-'            reduce using rule 30
	';'            reduce using rule 30
	'break'        reduce using rule 30
	'continue'     reduce using rule 30
	'def'          reduce using rule 30
	'false'        reduce using rule 30
	'if'           reduce using rule 30
	'lambda'       reduce using rule 30
	'return'       reduce using rule 30
	'true'         reduce using rule 30
	'var'          reduce using rule 30
	'while'        reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	L_Ident        reduce using rule 30
	L_integ        reduce using rule 30
	L_quoted       reduce using rule 30


State 110

	ListStmt -> Stmt ListStmt .                         (rule 16)

	'}'            reduce using rule 16


State 111

	Block -> '{' ListStmt '}' .                         (rule 14)

	'!'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	','            reduce using rule 14
	'-'            reduce using rule 14
	';'            reduce using rule 14
	'break'        reduce using rule 14
	'continue'     reduce using rule 14
	'def'          reduce using rule 14
	'else'         reduce using rule 14
	'false'        reduce using rule 14
	'if'           reduce using rule 14
	'lambda'       reduce using rule 14
	'return'       reduce using rule 14
	'true'         reduce using rule 14
	'var'          reduce using rule 14
	'while'        reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	L_Ident        reduce using rule 14
	L_integ        reduce using rule 14
	L_quoted       reduce using rule 14
	%eof           reduce using rule 14


State 112

	Stmt -> Ident '++' . ';'                            (rule 21)

	';'            shift, and enter state 120


State 113

	Stmt -> Ident '--' . ';'                            (rule 22)

	';'            shift, and enter state 119


State 114

	Stmt -> Ident '=' . Expr ';'                        (rule 20)

	'!'            shift, and enter state 40
	'('            shift, and enter state 41
	'-'            shift, and enter state 42
	'false'        shift, and enter state 43
	'lambda'       shift, and enter state 44
	'true'         shift, and enter state 45
	L_Ident        shift, and enter state 2
	L_integ        shift, and enter state 46
	L_quoted       shift, and enter state 47

	Ident          goto state 30
	Integer        goto state 31
	String         goto state 32
	Expr6          goto state 33
	Expr5          goto state 34
	Expr4          goto state 35
	Expr3          goto state 36
	Expr2          goto state 37
	Expr1          goto state 38
	Expr           goto state 118

State 115

	ListExpr -> Expr ',' ListExpr .                     (rule 62)

	')'            reduce using rule 62


State 116

	Expr -> 'lambda' '(' ListArg ')' '->' . Type Block    (rule 58)

	'('            shift, and enter state 9
	'bool'         shift, and enter state 10
	'int'          shift, and enter state 11
	'string'       shift, and enter state 12
	'void'         shift, and enter state 13

	Type           goto state 117

State 117

	Expr -> 'lambda' '(' ListArg ')' '->' Type . Block    (rule 58)

	'{'            shift, and enter state 77

	Block          goto state 127

State 118

	Stmt -> Ident '=' Expr . ';'                        (rule 20)

	';'            shift, and enter state 126


State 119

	Stmt -> Ident '--' ';' .                            (rule 22)

	'!'            reduce using rule 22
	'('            reduce using rule 22
	'-'            reduce using rule 22
	';'            reduce using rule 22
	'break'        reduce using rule 22
	'continue'     reduce using rule 22
	'def'          reduce using rule 22
	'false'        reduce using rule 22
	'if'           reduce using rule 22
	'lambda'       reduce using rule 22
	'return'       reduce using rule 22
	'true'         reduce using rule 22
	'var'          reduce using rule 22
	'while'        reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	L_Ident        reduce using rule 22
	L_integ        reduce using rule 22
	L_quoted       reduce using rule 22


State 120

	Stmt -> Ident '++' ';' .                            (rule 21)

	'!'            reduce using rule 21
	'('            reduce using rule 21
	'-'            reduce using rule 21
	';'            reduce using rule 21
	'break'        reduce using rule 21
	'continue'     reduce using rule 21
	'def'          reduce using rule 21
	'false'        reduce using rule 21
	'if'           reduce using rule 21
	'lambda'       reduce using rule 21
	'return'       reduce using rule 21
	'true'         reduce using rule 21
	'var'          reduce using rule 21
	'while'        reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	L_Ident        reduce using rule 21
	L_integ        reduce using rule 21
	L_quoted       reduce using rule 21


State 121

	Stmt -> 'if' '(' Expr . ')' Block                   (rule 25)
	Stmt -> 'if' '(' Expr . ')' Block 'else' Block      (rule 26)

	')'            shift, and enter state 125


State 122

	Stmt -> 'return' Expr ';' .                         (rule 23)

	'!'            reduce using rule 23
	'('            reduce using rule 23
	'-'            reduce using rule 23
	';'            reduce using rule 23
	'break'        reduce using rule 23
	'continue'     reduce using rule 23
	'def'          reduce using rule 23
	'false'        reduce using rule 23
	'if'           reduce using rule 23
	'lambda'       reduce using rule 23
	'return'       reduce using rule 23
	'true'         reduce using rule 23
	'var'          reduce using rule 23
	'while'        reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	L_Ident        reduce using rule 23
	L_integ        reduce using rule 23
	L_quoted       reduce using rule 23


State 123

	Stmt -> 'while' '(' Expr . ')' Block                (rule 27)

	')'            shift, and enter state 124


State 124

	Stmt -> 'while' '(' Expr ')' . Block                (rule 27)

	'{'            shift, and enter state 77

	Block          goto state 129

State 125

	Stmt -> 'if' '(' Expr ')' . Block                   (rule 25)
	Stmt -> 'if' '(' Expr ')' . Block 'else' Block      (rule 26)

	'{'            shift, and enter state 77

	Block          goto state 128

State 126

	Stmt -> Ident '=' Expr ';' .                        (rule 20)

	'!'            reduce using rule 20
	'('            reduce using rule 20
	'-'            reduce using rule 20
	';'            reduce using rule 20
	'break'        reduce using rule 20
	'continue'     reduce using rule 20
	'def'          reduce using rule 20
	'false'        reduce using rule 20
	'if'           reduce using rule 20
	'lambda'       reduce using rule 20
	'return'       reduce using rule 20
	'true'         reduce using rule 20
	'var'          reduce using rule 20
	'while'        reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	L_Ident        reduce using rule 20
	L_integ        reduce using rule 20
	L_quoted       reduce using rule 20


State 127

	Expr -> 'lambda' '(' ListArg ')' '->' Type Block .    (rule 58)

	')'            reduce using rule 58
	','            reduce using rule 58
	';'            reduce using rule 58


State 128

	Stmt -> 'if' '(' Expr ')' Block .                   (rule 25)
	Stmt -> 'if' '(' Expr ')' Block . 'else' Block      (rule 26)

	'!'            reduce using rule 25
	'('            reduce using rule 25
	'-'            reduce using rule 25
	';'            reduce using rule 25
	'break'        reduce using rule 25
	'continue'     reduce using rule 25
	'def'          reduce using rule 25
	'else'         shift, and enter state 130
	'false'        reduce using rule 25
	'if'           reduce using rule 25
	'lambda'       reduce using rule 25
	'return'       reduce using rule 25
	'true'         reduce using rule 25
	'var'          reduce using rule 25
	'while'        reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	L_Ident        reduce using rule 25
	L_integ        reduce using rule 25
	L_quoted       reduce using rule 25


State 129

	Stmt -> 'while' '(' Expr ')' Block .                (rule 27)

	'!'            reduce using rule 27
	'('            reduce using rule 27
	'-'            reduce using rule 27
	';'            reduce using rule 27
	'break'        reduce using rule 27
	'continue'     reduce using rule 27
	'def'          reduce using rule 27
	'false'        reduce using rule 27
	'if'           reduce using rule 27
	'lambda'       reduce using rule 27
	'return'       reduce using rule 27
	'true'         reduce using rule 27
	'var'          reduce using rule 27
	'while'        reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	L_Ident        reduce using rule 27
	L_integ        reduce using rule 27
	L_quoted       reduce using rule 27


State 130

	Stmt -> 'if' '(' Expr ')' Block 'else' . Block      (rule 26)

	'{'            shift, and enter state 77

	Block          goto state 131

State 131

	Stmt -> 'if' '(' Expr ')' Block 'else' Block .      (rule 26)

	'!'            reduce using rule 26
	'('            reduce using rule 26
	'-'            reduce using rule 26
	';'            reduce using rule 26
	'break'        reduce using rule 26
	'continue'     reduce using rule 26
	'def'          reduce using rule 26
	'false'        reduce using rule 26
	'if'           reduce using rule 26
	'lambda'       reduce using rule 26
	'return'       reduce using rule 26
	'true'         reduce using rule 26
	'var'          reduce using rule 26
	'while'        reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	L_Ident        reduce using rule 26
	L_integ        reduce using rule 26
	L_quoted       reduce using rule 26


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 74
Number of terminals: 42
Number of non-terminals: 25
Number of states: 132
