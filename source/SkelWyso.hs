-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelWyso where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsWyso

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsWyso.Ident -> Result
transIdent x = case x of
  AbsWyso.Ident string -> failure x

transProgram :: Show a => AbsWyso.Program' a -> Result
transProgram x = case x of
  AbsWyso.ProgramName _ alldefs -> failure x

transArg :: Show a => AbsWyso.Arg' a -> Result
transArg x = case x of
  AbsWyso.ValArg _ type_ ident -> failure x
  AbsWyso.VarArg _ type_ ident -> failure x

transAllDef :: Show a => AbsWyso.AllDef' a -> Result
transAllDef x = case x of
  AbsWyso.FunDef _ type_ ident args block -> failure x
  AbsWyso.VarDef _ type_ ident expr -> failure x

transBlock :: Show a => AbsWyso.Block' a -> Result
transBlock x = case x of
  AbsWyso.BlockName _ stmts -> failure x

transStmt :: Show a => AbsWyso.Stmt' a -> Result
transStmt x = case x of
  AbsWyso.Empty _ -> failure x
  AbsWyso.BStmt _ block -> failure x
  AbsWyso.DefStmt _ alldef -> failure x
  AbsWyso.Ass _ ident expr -> failure x
  AbsWyso.Incr _ ident -> failure x
  AbsWyso.Decr _ ident -> failure x
  AbsWyso.Ret _ expr -> failure x
  AbsWyso.VRet _ -> failure x
  AbsWyso.Cond _ expr block -> failure x
  AbsWyso.CondElse _ expr block1 block2 -> failure x
  AbsWyso.While _ expr block -> failure x
  AbsWyso.Break _ -> failure x
  AbsWyso.Cont _ -> failure x
  AbsWyso.SExp _ expr -> failure x

transType :: Show a => AbsWyso.Type' a -> Result
transType x = case x of
  AbsWyso.Int _ -> failure x
  AbsWyso.Str _ -> failure x
  AbsWyso.Bool _ -> failure x
  AbsWyso.Void _ -> failure x
  AbsWyso.Fun _ types type_ -> failure x

transExpr :: Show a => AbsWyso.Expr' a -> Result
transExpr x = case x of
  AbsWyso.EVar _ ident -> failure x
  AbsWyso.ELitInt _ integer -> failure x
  AbsWyso.ELitTrue _ -> failure x
  AbsWyso.ELitFalse _ -> failure x
  AbsWyso.EApp _ ident exprs -> failure x
  AbsWyso.EString _ string -> failure x
  AbsWyso.Neg _ expr -> failure x
  AbsWyso.Not _ expr -> failure x
  AbsWyso.EMul _ expr1 mulop expr2 -> failure x
  AbsWyso.EAdd _ expr1 addop expr2 -> failure x
  AbsWyso.ERel _ expr1 relop expr2 -> failure x
  AbsWyso.EAnd _ expr1 expr2 -> failure x
  AbsWyso.EOr _ expr1 expr2 -> failure x
  AbsWyso.EConcat _ expr1 expr2 -> failure x
  AbsWyso.ELambda _ args type_ block -> failure x

transAddOp :: Show a => AbsWyso.AddOp' a -> Result
transAddOp x = case x of
  AbsWyso.Plus _ -> failure x
  AbsWyso.Minus _ -> failure x

transMulOp :: Show a => AbsWyso.MulOp' a -> Result
transMulOp x = case x of
  AbsWyso.Times _ -> failure x
  AbsWyso.Div _ -> failure x
  AbsWyso.Mod _ -> failure x

transRelOp :: Show a => AbsWyso.RelOp' a -> Result
transRelOp x = case x of
  AbsWyso.LTH _ -> failure x
  AbsWyso.LE _ -> failure x
  AbsWyso.GTH _ -> failure x
  AbsWyso.GE _ -> failure x
  AbsWyso.EQU _ -> failure x
  AbsWyso.NE _ -> failure x
